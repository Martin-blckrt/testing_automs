name: Project V2 Status → Slack (BUG REQUESTS)

on:
  issues:
    # On couvre l'ajout à un projet + plusieurs modifs usuelles
    types: [opened, edited, labeled, unlabeled, added_to_project, reopened]

jobs:
  notify_when_status_is_bug_requests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      pull-requests: read
      repository-projects: read   # <= permission correcte pour Projects (v1/v2)

    steps:
      - name: Install jq + gh
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          if ! command -v gh >/dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
            | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
            | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt-get update -y && sudo apt-get install -y gh
          fi

      - name: Read Issue's ProjectV2 Status via GraphQL
        id: read_status
        env:
          EVENT_JSON: ${{ toJson(github.event) }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          ISSUE_NODE_ID=$(jq -r '.issue.node_id' <<<"$EVENT_JSON")
          if [ -z "$ISSUE_NODE_ID" ] || [ "$ISSUE_NODE_ID" = "null" ]; then
            echo "❌ Pas de issue.node_id dans l'événement"; exit 1
          fi

          # GraphQL: récupérer les items de Project v2 associés à l’issue et la valeur du champ "Status"
          QUERY='
          query($id:ID!) {
            node(id: $id) {
              __typename
              ... on Issue {
                title url body
                repository { nameWithOwner }
                author { login }
                projectItems(first: 20) {
                  nodes {
                    project { title }
                    fieldValueByName(name: "Status") {
                      __typename
                      ... on ProjectV2ItemFieldSingleSelectValue { name }
                    }
                  }
                }
              }
            }
          }'

          RESP=$(gh api graphql -f query="$QUERY" -F id="$ISSUE_NODE_ID")
          echo "== GraphQL RESP =="
          echo "$RESP" | jq -C .

          STATUS_MATCH=$(jq -r '
            .data.node.projectItems.nodes[]
            | .fieldValueByName.name // empty
          ' <<<"$RESP" | grep -Fx "BUG REQUESTS" | wc -l)

          SEND=no
          [ "$STATUS_MATCH" -ge 1 ] && SEND=yes

          TITLE=$(jq -r '.data.node.title // ""' <<<"$RESP")
          URL=$(jq -r '.data.node.url // ""' <<<"$RESP")
          REPO=$(jq -r '.data.node.repository.nameWithOwner // ""' <<<"$RESP")
          AUTHOR=$(jq -r '.data.node.author.login // ""' <<<"$RESP")
          BODY=$(jq -r '.data.node.body // ""' <<<"$RESP" | head -c 700)

          {
            echo "send=$SEND"
            echo "title=$TITLE"
            echo "url=$URL"
            echo "repo=$REPO"
            echo "author=$AUTHOR"
            echo "body<<EOF"
            echo "$BODY"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Send Slack (Status = BUG REQUESTS)
        if: steps.read_status.outputs.send == 'yes'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TITLE: ${{ steps.read_status.outputs.title }}
          URL: ${{ steps.read_status.outputs.url }}
          REPO: ${{ steps.read_status.outputs.repo }}
          AUTHOR: ${{ steps.read_status.outputs.author }}
          BODY: ${{ steps.read_status.outputs.body }}
        run: |
          set -e
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "❌ Secret SLACK_WEBHOOK_URL manquant"; exit 1
          fi

          jq -n \
            --arg repo "$REPO" \
            --arg title "$TITLE" \
            --arg url "$URL" \
            --arg author "$AUTHOR" \
            --arg body "$BODY" \
            '{
              text: "Issue avec Status = BUG REQUESTS",
              blocks: [
                { "type":"section", "text":{"type":"mrkdwn", "text":":beetle: *Status set: BUG REQUESTS*"} },
                { "type":"section", "text":{"type":"mrkdwn", "text":"*Repo:* `\($repo)`\n*Titre:* <\($url)|\($title)>\n*Auteur:* \($author)"} },
                { "type":"section", "text":{"type":"mrkdwn", "text":"*Résumé:*\n```\($body)```"} }
              ]
            }' \
          | curl -s -X POST -H 'Content-type: application/json' --data @- -w " HTTP_CODE:%{http_code}\n" "$SLACK_WEBHOOK_URL"
