name: Issue comment ‚Üí Email (BUG only + template)

on:
  issue_comment:
    types: [created]   # ajoute "edited" si tu veux couvrir les modifs

jobs:
  mail_on_bug_comment:
    runs-on: ubuntu-latest
    permissions:
      issues: read
    env:
      EVENT_JSON: ${{ toJson(github.event) }}
      REPO: ${{ github.repository }}
      BUG_LABEL: "bug"   # ‚Üê change si ton label est "BUG REQUESTS" etc.
      # === Formalisme attendu (titres/sections obligatoires) ===
      REQ_SECTIONS: |
        ^###\s*Contexte
        ^###\s*√âtapes pour reproduire
        ^###\s*Comportement attendu
        ^###\s*Environnement
    steps:
      - name: Extraires infos (issue & comment)
        id: base
        run: |
          TITLE=$(jq -r '.issue.title' <<<"$EVENT_JSON")
          ISSUE_URL=$(jq -r '.issue.html_url' <<<"$EVENT_JSON")
          ISSUE_BODY=$(jq -r '.issue.body // ""' <<<"$EVENT_JSON")
          LABELS=$(jq -r '[.issue.labels[].name] | join(", ")' <<<"$EVENT_JSON")

          COMMENT_AUTHOR=$(jq -r '.comment.user.login' <<<"$EVENT_JSON")
          COMMENT_URL=$(jq -r '.comment.html_url' <<<"$EVENT_JSON")
          COMMENT_BODY=$(jq -r '.comment.body // ""' <<<"$EVENT_JSON")

          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "issue_url=$ISSUE_URL" >> $GITHUB_OUTPUT
          echo "labels=$LABELS" >> $GITHUB_OUTPUT
          echo "comment_author=$COMMENT_AUTHOR" >> $GITHUB_OUTPUT
          echo "comment_url=$COMMENT_URL" >> $GITHUB_OUTPUT

          printf '%s' "$ISSUE_BODY" > issue_body.md
          printf '%s' "$COMMENT_BODY" > comment_body.md

      - name: Garde 1 ‚Äî L‚Äôissue a le label BUG ?
        id: label_guard
        run: |
          HAS_LABEL=$(jq -r --arg WANT "$BUG_LABEL" '.issue.labels[].name | select(ascii_downcase == ($WANT|ascii_downcase))' <<<"$EVENT_JSON" | wc -l)
          if [ "$HAS_LABEL" -ge 1 ]; then
            echo "ok=yes" >> $GITHUB_OUTPUT
          else
            echo "ok=no"  >> $GITHUB_OUTPUT
          fi

      - name: Garde 2 ‚Äî Le formalisme de l‚Äôissue est respect√© ?
        id: template_guard
        if: steps.label_guard.outputs.ok == 'yes'
        run: |
          # On exige que chaque section requise soit pr√©sente en d√©but de ligne
          FAIL=0
          while IFS= read -r pattern; do
            [ -z "$pattern" ] && continue
            if ! grep -Eq "$pattern" issue_body.md; then
              echo "Manque la section correspondant au motif: $pattern"
              FAIL=1
            fi
          done <<< "$REQ_SECTIONS"

          if [ "$FAIL" -eq 0 ]; then
            echo "ok=yes" >> $GITHUB_OUTPUT
          else
            echo "ok=no"  >> $GITHUB_OUTPUT
          fi

      - name: Construire le corps HTML de l‚Äôe-mail
        id: compose
        if: steps.template_guard.outputs.ok == 'yes'
        run: |
          cat > mail.html <<'HTML'
          <h2>üîî Nouveau commentaire sur un BUG</h2>
          <p><b>Repository:</b> ${REPO}</p>
          <p><b>Issue:</b> <a href="${ISSUE_URL}">${TITLE}</a></p>
          <p><b>Labels:</b> ${LABELS}</p>
          <hr/>
          <h3>üß© Commentaire</h3>
          <p><b>Auteur:</b> ${COMMENT_AUTHOR}</p>
          <p><b>Lien:</b> <a href="${COMMENT_URL}">${COMMENT_URL}</a></p>
          <pre style="white-space:pre-wrap;font-family:ui-monospace,Consolas,monospace;">${COMMENT_BODY}</pre>
          <hr/>
          <h3>üìÑ Rappel du template de l‚Äôissue</h3>
          <pre style="white-space:pre-wrap;font-family:ui-monospace,Consolas,monospace;">${ISSUE_BODY}</pre>
          HTML

          # Injecter les variables dans le HTML
          ISSUE_BODY=$(cat issue_body.md)
          COMMENT_BODY=$(cat comment_body.md)
          envsubst \
            <(printf 'REPO=%s\nTITLE=%s\nISSUE_URL=%s\nLABELS=%s\nCOMMENT_AUTHOR=%s\nCOMMENT_URL=%s\n' \
              "${REPO}" "${{ steps.base.outputs.title }}" "${{ steps.base.outputs.issue_url }}" "${{ steps.base.outputs.labels }}" "${{ steps.base.outputs.comment_author }}" "${{ steps.base.outputs.comment_url }}") \
            < mail.html \
          | sed "s|\${ISSUE_BODY}|$(printf '%s' "$ISSUE_BODY" | sed -e 's,[\/&],\\&,g')|" \
          | sed "s|\${COMMENT_BODY}|$(printf '%s' "$COMMENT_BODY" | sed -e 's,[\/&],\\&,g')|" \
          > mail.resolved.html

      - name: Envoyer l‚Äôe-mail
        if: steps.compose.conclusion == 'success'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}        # ex: smtp.gmail.com
          server_port: ${{ secrets.SMTP_PORT }}             # ex: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "üí• [BUG] Nouveau commentaire ‚Äî ${{ steps.base.outputs.title }}"
          from: ${{ secrets.MAIL_FROM }}                    # ex: "alerts@cynapps.ai"
          to: ${{ secrets.MAIL_TO }}                        # ex: "qa@cynapps.ai, support@cynapps.ai"
          secure: true
          convert_markdown: false
          html_body: file://mail.resolved.html
